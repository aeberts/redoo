(def devtools-version "0.9.4")
(def dirac-version "1.2.16")
(def figwheel-version "0.5.14")

(defproject redoo "0.1.0-SNAPSHOT"
  :dependencies [
                 [org.clojure/clojure "1.8.0"]
                 [org.clojure/clojurescript "1.9.946"]
                 [org.clojure/tools.nrepl "0.2.13"]
                 [binaryage/devtools ~devtools-version]
                 [binaryage/dirac ~dirac-version]
                 [figwheel ~figwheel-version]
                 ;[figwheel-sidecar "0.5.14"]
                 [reagent "0.8.0-alpha1"]
                 [re-frame "0.9.2"]
                 [re-frisk "0.4.5"]
                 [org.clojure/core.async "0.3.443"]
                 [re-com "0.9.0"]
                 [secretary "1.2.3"]
                 [garden "1.3.2"]
                 [ns-tracker "0.3.0"]
                 [compojure "1.5.0"]
                 [yogthos/config "0.8"]
                 [ring "1.4.0"]
                 ]

  :plugins [[lein-cljsbuild "1.1.7"]
            [lein-garden "0.3.0"]
            [lein-less "1.7.5"]
            [lein-shell "0.4.1"]
            [lein-cooper "1.2.2"]
            [lein-figwheel ~figwheel-version]]

  :min-lein-version "2.5.3"

  :source-paths ["src/clj" "src/cljs" "script"]

  :clean-targets ^{:protect false} ["resources/public/js/compiled"
                                    "target"
                                    "resources/public/css"]

  ; this effectively disables checkouts and gives us a chance to re-enable them on per-profile basis, see :checkouts profile
  ; http://jakemccrary.com/blog/2015/03/24/advanced-leiningen-checkouts-configuring-what-ends-up-on-your-classpath/
  :checkout-deps-shares ^:replace []

  :cljsbuild {:builds {}}

  ; figwheel config integrated below
  ;:figwheel {:css-dirs ["resources/public/css"]
  ;           :ring-handler redoo.handler/dev-handler
  ;           :open-file-command "open-in-intellij"}



  :profiles
  {
   :clojure18
         {:dependencies ^:replace [[org.clojure/clojure "1.8.0" :upgrade false]
                                   [org.clojure/clojurescript "1.9.946" :upgrade false]
                                   [binaryage/devtools ~devtools-version]
                                   [binaryage/dirac ~dirac-version]
                                   [reagent "0.8.0-alpha1"]
                                   [re-frame "0.9.2"]
                                   [re-frisk "0.4.5"]
                                   [org.clojure/core.async "0.3.443"]
                                   [re-com "0.9.0"]
                                   [secretary "1.2.3"]
                                   [garden "1.3.2"]
                                   [ns-tracker "0.3.0"]
                                   [compojure "1.5.0"]
                                   [yogthos/config "0.8"]
                                   [ring "1.4.0"]
                                   ]}

   :demo { :cljsbuild {
                      :builds {
                               :demo
                               {:source-paths ["src/cljs"]
                                :compiler     {:output-to            "resources/public/compiled/app.js"
                                               :output-dir           "resources/public/compiled/out"
                                               :asset-path           "js/compiled/out"
                                               :source-map-timestamp true
                                               :preloads             [devtools.preload dirac.runtime.preload]
                                               :main                 redoo.server
                                               :optimizations        :none
                                               :external-config      {:dirac.runtime/config
                                                                      {:nrepl-config {:reveal-url-script-path "script/reveal.sh"
                                                                                      ;:reveal-url-request-handler (fn [config url line column]
                                                                                      ;                              (str "ERR REPLY>" url))
                                                                                      }}}

                                               :source-map           true}}
                               :min
                               {:source-paths ["src/clj" "src/cljs"]
                                :jar          true
                                :compiler     {:main            redoo.core
                                               :output-to       "resources/public/js/compiled/app.js"
                                               :optimizations   :advanced
                                               :closure-defines {goog.DEBUG false}
                                               :pretty-print    false}}
                               }}}

   :garden
         {:builds {:screen
                   {:source-paths ["src/clj"]
                    :stylesheet   redoo.css/screen
                    :compiler     {:output-to     "resources/public/css/screen.css"
                                   :pretty-print? true}}}}

   :less {:source-paths ["less"]
          :target-path  "resources/public/css"}

   :dirac-logging
         {:dependencies [[clj-logging-config "1.9.12"]]
          :repl-options {:init ^:replace (do
                                           (require 'dirac.agent)
                                           (require 'dirac.logging)
                                           (dirac.logging/setup! {:log-out   :console
                                                                  :log-level "TRACE"})
                                           (dirac.agent/boot!))}}

   :repl
         {:repl-options {:port             8230
                         :nrepl-middleware [dirac.nrepl/middleware]
                         :init             (do
                                             (require 'dirac.agent)
                                             (dirac.agent/boot!))}}

   :figwheel-config
         {:figwheel  {:server-port    7111
                      :server-logfile ".figwheel/demo.log"
                      :css-dirs       ["resources/public/css"]
                      :ring-handler   redoo.handler/dev-handler
                      :repl           false}
          :cljsbuild {:builds {
                               :demo
                               {:figwheel true}}}}

   :figwheel-repl
         {:figwheel {:repl true}}

   :figwheel-nrepl
         [:figwheel-config
          ; following https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-within-NRepl
          {:dependencies [[figwheel-sidecar ~figwheel-version]]
           :repl-options {:init ^:replace (do
                                            (require 'dirac.agent)
                                            (use 'figwheel-sidecar.repl-api)
                                            (start-figwheel!
                                              {:figwheel-options {:server-port 7111} ;; <-- figwheel server config goes here
                                               :build-ids        ["demo"] ;; <-- a vector of build ids to start autobuilding
                                               :all-builds  ;; <-- supply your build configs here
                                                                 [{:id           "demo"
                                                                   :figwheel     true
                                                                   :source-paths ["src/clj" "src/cljs" "script"]
                                                                   :compiler     {:output-to     "resources/public/compiled/app.js"
                                                                                  :output-dir    "resources/public/compiled/out"
                                                                                  :asset-path    "js/compiled/out"
                                                                                  :preloads      ['devtools.preload 'dirac.runtime.preload]
                                                                                  :main          'redoo-server
                                                                                  :optimizations :none
                                                                                  :source-map    true}}]})
                                            (dirac.agent/boot!)
                                            #_(cljs-repl))}}]

   :checkouts
         {:checkout-deps-shares ^:replace [:source-paths
                                           ;:test-paths
                                           :resource-paths
                                           :compile-path
                                           #=(eval leiningen.core.classpath/checkout-deps-paths)]
          :cljsbuild            {:builds
                                 {:demo
                                  {:source-paths ["checkouts/cljs-devtools/src/lib"
                                                  "checkouts/dirac/src/runtime"]}
                                  ;:tests
                                  ;{:source-paths ["checkouts/cljs-devtools/src/lib"
                                  ;                "checkouts/dirac/src/runtime"]}
                                  :min
                                  {:source-paths ["checkouts/cljs-devtools/src/lib"
                                                  "checkouts/dirac/src/runtime"]}}}}

   ; --------------------------------------------------------------------------------------------------------------
   :debugger-5005
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]}

   :suspended-debugger-5005
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"]}

   :debugger-5006
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006"]}

   :suspended-debugger-5006
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006"]}

   :debugger-5007
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5007"]}

   :suspended-debugger-5007
         {:jvm-opts ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5007"]}

   ; --------------------------------------------------------------------------------------------------------------
   :cooper-config
         {:cooper {"figwheel" ["lein" "dev-fig"]
                   ;"server"   ["lein" "dev-server"]
                   }}}

  ; =========================================================================================================================

  :aliases {"demo"               "demo18"

            "demo18"             ["with-profile" "+demo,+clojure18" "do"
                                  ["clean"]
                                  ["cljsbuild" "once"]
                                  ;["shell" "script/dev-server.sh"]
                                  ]

            ;"demo-node"                "demo-node18"
            ;
            ;"demo-node18"              ["with-profile" "+demo-node,+clojure18" "do"
            ;                            ["clean"]
            ;                            ["cljsbuild" "once"]
            ;                            ["shell" "scripts/run-node-demo.sh"]]
            ;
            ;"demo-node-dev"            ["with-profile" "+demo-node,+clojure18,+checkouts" "do"
            ;                            ["cljsbuild" "once" "demo"]
            ;                            ["shell" "scripts/run-node-demo.sh"]]
            ;
            ;"demo-node-dev-inlined-sm" ["with-profile" "+demo-node,+demo-node-inline-sm,+clojure18,+checkouts" "do"
            ;                            ["cljsbuild" "once" "demo"]
            ;                            ["shell" "scripts/run-node-demo.sh" "1"]]

            "repl18"             ["with-profile" "+repl,+clojure18" "repl"]

            "repl-dev"           ["with-profile" "+repl,+clojure18,+checkouts,+dirac-logging,+debugger-5005" "repl"]

            "repl-figwheel"      ["with-profile" "+repl,+clojure18,+checkouts,+figwheel-nrepl" "repl"]

            "fig-repl"           ["with-profile" "+repl,+clojure18,+figwheel-config,+figwheel-repl" "figwheel"]
            "auto-compile-tests" ["with-profile" "+tests,+checkouts" "cljsbuild" "auto"]
            "auto-compile-demo"  ["with-profile" "+demo,+checkouts" "cljsbuild" "auto"]
            ;"dev-fig"            ["with-profile" "+demo,+tests,+checkouts,+figwheel-config" "figwheel" "demo" "tests"]
            "dev-fig"            ["with-profile" "+demo,+figwheel-config" "figwheel" "demo"]
            "dev-server"         ["shell" "script/dev-server.sh"]
            "dev"                ["with-profile" "+cooper-config" "do"
                                  ["clean"]
                                  ["cooper"]]}
  :aot [redoo.server]

  :uberjar-name "redoo.jar"

  :prep-tasks [["cljsbuild" "once" "min"] ["garden" "once"] ["less" "once"] "compile"]
  )